{
	"info": {
		"_postman_id": "38b3da94-5836-47f6-aa35-27d1f1c07a5a",
		"name": "Backend-API",
		"description": "Donate gifts backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "Get user data of logged in user",
					"id": "f565b749-a248-4ffa-b769-23f3e6cbca64",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"id": "67ac520f-0393-4bf7-b48c-dc50b1b4577e",
							"name": "the logged in user or nothing if no user exists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"id\": {\n    \"value\": \"reference #/components/schemas/SpacecraftId not found in the OpenAPI spec\"\n  },\n  \"name\": \"sed laborum\",\n  \"type\": \"probe\",\n  \"description\": \"non aute laboris\"\n}"
						},
						{
							"id": "d62dae59-6b45-4b05-8ba4-30d1f9683e64",
							"name": "Unexpected error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "authorization",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"aute mollit sed\"\n}"
						}
					]
				},
				{
					"name": "create user with firebase data",
					"id": "da3aecd2-2439-49f4-b843-9b8a49d5228a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"fugiat\",\n  \"lastName\": \"Duis te\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"id": "a3ba385b-91f5-4564-90b4-4945ba728339",
							"name": "the logged in user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"fugiat\",\n  \"lastName\": \"Duis te\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"id\": {\n    \"value\": \"reference #/components/schemas/SpacecraftId not found in the OpenAPI spec\"\n  },\n  \"name\": \"sed laborum\",\n  \"type\": \"probe\",\n  \"description\": \"non aute laboris\"\n}"
						},
						{
							"id": "1d7992ed-5bd0-46fd-b973-04e0036900f5",
							"name": "Unexpected error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"fugiat\",\n  \"lastName\": \"Duis te\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"aute mollit sed\"\n}"
						}
					]
				},
				{
					"name": "update user",
					"id": "444dbeea-4cce-4129-8b75-84f87456695a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"aliquip aliqua sit nisi\",\n  \"lastName\": \"ullamco culpa adipisicing\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"id": "d70b32cd-4836-449b-9688-e94a0115db7e",
							"name": "the logged in user",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"aliquip aliqua sit nisi\",\n  \"lastName\": \"ullamco culpa adipisicing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"id\": {\n    \"value\": \"reference #/components/schemas/SpacecraftId not found in the OpenAPI spec\"\n  },\n  \"name\": \"sed laborum\",\n  \"type\": \"probe\",\n  \"description\": \"non aute laboris\"\n}"
						},
						{
							"id": "5bef0135-c857-4f87-8321-0891a082f8ab",
							"name": "Unexpected error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "authorization",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"aliquip aliqua sit nisi\",\n  \"lastName\": \"ullamco culpa adipisicing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"message\": \"aute mollit sed\"\n}"
						}
					]
				}
			],
			"id": "47ca4613-a2a5-4c55-aa9a-65a66bdd375d"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "<API Key>",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "56a49eab-4787-49d8-b3a2-2378a51888e4",
				"type": "text/javascript",
				"exec": [
					"const { Header, Response, HeaderList } = require('postman-collection');",
					"",
					"/**",
					" * Information about the current Firebase user",
					" * @typedef {Object} UserInfo",
					" * @property {String} accessToken - The Firebase ID token for this user",
					" * @property {String | undefined} displayName - Display name of the user, if available",
					" * @property {Number} expiresAt - When this token expires as a unix timestamp",
					" * @property {String | undefined} email - Email associated with the user, if available",
					" * @property {String} refreshToken - Refresh token for this user's ID token",
					" * @property {String} uid - User ID for this user",
					" */",
					"",
					"/**",
					" * Loads a third-party JavaScript module from a CDN (e.g. unpkg, jsDelivr)",
					" * @param {[String, String, String]} moduleTuple - Array containing the module's ID, its source URL and an optional SHA256 signature",
					" * @param {Object | (err: any, exports: any) => any} exportsRefOrCallback - Object reference to use as `exports` for the module or a result handler callback",
					" * @param {(err: any, exports: any) => any} callback - result handler callback",
					" */",
					"function loadModule(moduleTuple, exportsRefOrCallback, callback = undefined) {",
					"    const exports = arguments.length == 2 ? {} : exportsRefOrCallback;",
					"    callback = arguments.length == 2 ? exportsRefOrCallback : callback;",
					"    const [id, src, signature] = moduleTuple;",
					"   ",
					"    if (pm.environment.has(\"jslibcache_\" + id)) {",
					"        const script = pm.environment.get(\"jslibcache_\" + id);",
					"",
					"        if (signature && signature === CryptoJS.SHA256(script).toString()) {",
					"            console.log(\"Using cached copy of \" + src);",
					"            try {",
					"              eval(script);",
					"              return callback(null, exports);",
					"            } catch {}",
					"        }",
					"    }",
					"",
					"    pm.sendRequest(src, (err, response) => {",
					"        try {",
					"            if (err || response.code !== 200) {",
					"                pm.expect.fail('Could not load external library');",
					"            }",
					"",
					"            const script = response.text();",
					"            signature && pm.expect(CryptoJS.SHA256(script).toString(), 'External library (' + id + ') has a bad SHA256 signature').to.equal(signature);",
					"            pm.environment.set(\"jslibcache_\" + id, script);",
					"            eval(script);",
					"",
					"            callback(null, exports);",
					"        } catch (err) {",
					"            callback(err, null);",
					"        }",
					"    });",
					"}",
					"",
					"/**",
					" * Signs in a test user using an email and password combination",
					" * ",
					" * @param {String} email email of the account to sign in with",
					" * @param {String} password email of the account to sign in with",
					" * @param {(error: any, response: Response) => any} callback request result handler",
					" */",
					"function signInWithEmailAndPassword(email, password, callback) {",
					"    pm.sendRequest({",
					"        url: \"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=\" + encodeURIComponent(pm.variables.get(\"firebase_apiKey\")),",
					"        body: JSON.stringify({ email, password, \"returnSecureToken\": true }),",
					"        headers: new HeaderList({}, [new Header(\"application/json\", \"Content-Type\")]),",
					"        method: \"POST\"",
					"    }, callback);",
					"}",
					"",
					"/**",
					" * Builds an Admin SDK compatible JWT using a Service Account key",
					" * ",
					" * Required Environment Variables:",
					" *  - `firebase_privateKey` - the private key from inside a service account key JSON file",
					" * ",
					" * Environment Variables:",
					" *  - `firebase_scope` - scopes used for the access token, space delimited",
					" * ",
					" * @param {Boolean | (error: any, idToken: String) => any} callbackOrForceRefresh token result handler or `true` to force using a fresh user token",
					" * @param {(error: any, idToken: String) => any} [callback] token result handler",
					" */",
					"function getAdminToken(callbackOrForceRefresh, callback) {",
					"    let forceRefresh = Boolean(callbackOrForceRefresh);",
					"    if (arguments.length === 1) {",
					"        callback = callbackOrForceRefresh;",
					"        forceRefresh = callbackOrForceRefresh = false;",
					"    }",
					"",
					"    loadModule(",
					"        [\"jsrsasign\", \"https://unpkg.com/jsrsasign@10.3.0/lib/jsrsasign.js\", \"39b7a00e9eed7d20b2e60fff0775697ff43160e02e5276868ae8780295598fd3\"],",
					"        (loadErr, { KJUR }) => {",
					"            if (loadErr) return callback(loadErr, null);",
					"            ",
					"            const exp = pm.environment.get(\"currentAdmin.exp\");",
					"            const nowSecs = Math.floor(Date.now() / 1000);",
					"",
					"            if (exp && exp > nowSecs && forceRefresh === false) {",
					"                return callback(null, pm.variables.get(\"currentAdmin.jwt\"));",
					"            }",
					"",
					"            try {",
					"                if (!pm.environment.has('firebase_privateKey')) {",
					"                    pm.expect.fail('Missing required environment variable \"firebase_privateKey\".');",
					"                }",
					"",
					"                // use specified scopes, or fallback to Admin SDK defaults",
					"                const scope = pm.environment.get('firebase_scope') || 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/firebase.database https://www.googleapis.com/auth/firebase.messaging https://www.googleapis.com/auth/identitytoolkit https://www.googleapis.com/auth/userinfo.email';",
					"                const privateKey = String(pm.environment.get('firebase_privateKey')).replace(\"\\\\n\", \"\\n\");",
					"",
					"                const header = {\"alg\" : \"RS256\", \"typ\" : \"JWT\"};",
					"                ",
					"                const claimSet =",
					"                {",
					"                    \"iss\": \"https://securetoken.google.com/\" + pm.environment.get(\"firebase_projectId\"),",
					"                    \"scope\": scope,",
					"                    \"aud\":\"https://accounts.google.com/o/oauth2/auth\",",
					"                    \"exp\": nowSecs + 3600, // now + 1 hour",
					"                    \"iat\": nowSecs",
					"                }",
					"",
					"                const jwt = KJUR.jws.JWS.sign(null, header, claimSet, privateKey);",
					"                ",
					"                // comment these lines out to disable caching",
					"                pm.environment.set(\"currentAdmin.jwt\", jwt);",
					"                pm.environment.set(\"currentAdmin.exp\", claimSet.exp);",
					"",
					"                callback(null, jwt);",
					"            } catch (err) {",
					"                callback(err, null);",
					"            }",
					"        }",
					"    );",
					"}",
					"",
					"/**",
					" * Builds a User ID Token using an email-password combo",
					" * ",
					" * Required Environment Variables:",
					" *  - `firebase_apiKey` - the Firebase API key for a web application",
					" *  - `firebase_test_user` - an email for a test user",
					" *  - `firebase_test_password` - the password for the test user",
					" * ",
					" * @param {Boolean | (error: any, idToken: String) => any} callbackOrForceRefresh token result handler or `true` to force using a fresh user token",
					" * @param {(error: any, idToken: String) => any} [callback] token result handler",
					" */",
					"function getIdToken(callbackOrForceRefresh, callback) {",
					"    let forceRefresh = Boolean(callbackOrForceRefresh);",
					"    if (arguments.length === 1) {",
					"        callback = callbackOrForceRefresh;",
					"        forceRefresh = callbackOrForceRefresh = false;",
					"    }",
					"",
					"    if (pm.environment.has(\"currentUser\") && forceRefresh === false) {",
					"        /** @type UserInfo */",
					"        const currentUser = JSON.parse(pm.environment.has(\"currentUser\"));",
					"        if (currentUser.expiresAt > Date.now()) { // has token expired?",
					"            return callback(null, currentUser.accessToken);",
					"        }",
					"    }",
					"",
					"    try {",
					"        if (!pm.variables.has('firebase_apiKey')) {",
					"            pm.expect.fail('Missing required environment variable \"firebase_apiKey\".');",
					"        }",
					"        if (!pm.variables.has('firebase_test_user')) {",
					"            pm.expect.fail('Missing required environment variable \"firebase_test_user\".');",
					"        }",
					"        if (!pm.variables.has('firebase_test_password')) {",
					"            pm.expect.fail('Missing required environment variable \"firebase_test_password\".');",
					"        }",
					"    } catch (err) {",
					"        return callback(err, null);",
					"    }",
					"",
					"    signInWithEmailAndPassword(pm.variables.get(\"firebase_test_user\"), pm.variables.get(\"firebase_test_password\"), (err, response) => {",
					"        if (err || response.code !== 200) {",
					"            pm.expect.fail('Could not sign in user: ' + response.json().error.message);",
					"        }",
					"",
					"        /** @type String */",
					"        let accessToken;",
					"",
					"        try {",
					"            const { idToken, refreshToken, email, displayName, localId: uid, expiresIn } = response.json();",
					"            accessToken = idToken;",
					"            const expiresAt = Date.now() + Number(expiresIn);",
					"",
					"            // comment these lines out to disable caching",
					"            // pm.environment.set(\"currentUser\", JSON.stringify({ accessToken, refreshToken, email, displayName, uid, expiresAt }));",
					"            // pm.environment.set(\"currentUser.accessToken\", accessToken);",
					"            // pm.environment.set(\"currentUser.refreshToken\", refreshToken);",
					"            // pm.environment.set(\"currentUser.email\", email);",
					"            // pm.environment.set(\"currentUser.displayName\", displayName);",
					"            // pm.environment.set(\"currentUser.uid\", uid);",
					"            // pm.environment.set(\"currentUser.expiresAt\", expiresAt);",
					"",
					"        } catch (err) {",
					"            return callback(err, null);",
					"        }",
					"",
					"        callback(null, accessToken);",
					"    });",
					"}",
					"",
					"const tokenTypeHeader = pm.request.headers.one(\"X-Auth-Token-Type\");",
					"pm.request.removeHeader(\"X-Auth-Token-Type\");",
					"",
					"switch (tokenTypeHeader && tokenTypeHeader.value.toLowerCase()) {",
					"    case \"admin\":",
					"        getAdminToken(false, (err, token) => { ",
					"            if (err || !token) pm.expect.fail(\"failed to get admin SDK token for request: \" + err.message);",
					"            pm.request.addHeader(new Header(\"Bearer \" + token, \"Authorization\"));",
					"        });",
					"    case \"user\":",
					"        getIdToken(false, (err, idToken) => {",
					"            if (err || !idToken) pm.expect.fail(\"failed to get user ID token for request: \" + err.message);",
					"            pm.request.addHeader(new Header(\"Bearer \" + idToken, \"Authorization\"));",
					"        });",
					"        break;",
					"    default:",
					"        break; // no auth, do nothing",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f0eaa854-836a-4f68-a5ae-ea73db548ea4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "90ef892a-4ff7-4164-aab4-6e486cd3365d",
			"key": "baseUrl",
			"value": "https://ts-backend-dev-vbamtom7tq-uc.a.run.app/",
			"type": "string"
		},
		{
			"id": "9af8d9fc-774e-429e-b827-69bc08db37f4",
			"key": "firebase_apiKey",
			"value": "AIzaSyDfSio8rEfy9QrmZIiQlrJITYe8xfLvLAY",
			"type": "string"
		},
		{
			"id": "ae473271-95fa-4415-9b63-5deec18b11fe",
			"key": "firebase_test_user",
			"value": "null",
			"type": "string"
		},
		{
			"id": "260c14f3-34de-4d38-95ee-b10c72881201",
			"key": "firebase_test_password",
			"value": "null",
			"type": "string"
		}
	]
}