generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  firstName String
  lastName  String?
  email     String    @unique
  uid       String    @id @unique
  role      Role      @default(DONOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  agencies    Agency[]
  cards      Card[]
}

model Agency {
  id         String    @id @default(uuid())
  name       String
  bio        String?
  isVerified Boolean   @default(false)
  phone      String
  website    String?
  creator    User      @relation(fields: [createdBy], references: [uid])
  createdBy  String
  addresses    Address[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  cards       Card[]
}

model Address {
  id                String    @id @default(uuid())
  firstName String
  lastName String
  street            String
  streetNumber      String
  additionalAddress String?
  zipcode           String
  city              String
  country           String
  state             String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?
  agency    Agency   @relation(fields: [agencyId], references: [id])
  agencyId      String
  card    Card[]
}

model Card {
  id        String      @id @default(uuid())
  type      CardType
  images    CardImage[]
  itemUrl   String
  itemPrice Decimal
  status    CardStatus
  address   Address     @relation(fields: [addressId], references: [id])
  addressId String
  creator   User        @relation(fields: [createdBy], references: [uid])
  createdBy String
  agency    Agency      @relation(fields: [agencyId], references: [id])
  agencyId  String
  childCard ChildCard?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
}

model ChildCard {
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId    String   @id
  birthday  DateTime?
  gender    Gender
  firstName String
  lastName  String?
  interest  String?
  bio       String?
}

model CardImage {
  id          String    @id @default(uuid())
  card        Card      @relation(fields: [cardId], references: [id])
  cardId      String
  path        String
  isMainImage Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

enum Role {
  DONOR
  AGENCY_MEMBER
  ADMIN
}

enum CardType {
  CHILD
}

enum Gender {
  MALE
  FEMALE
}

enum CardStatus {
  DRAFT
  PUBLISHED
  DONATED
}
